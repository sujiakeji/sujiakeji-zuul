buildscript {
    repositories {
        maven { url 'http://localhost:8081/nexus/content/groups/public' }
    }
    ext {
        springVersion = "5.1.6.RELEASE"
        springBootVersion = "2.1.4.RELEASE"
        springBootAdminVersion = "2.1.4"
        springCloudVersion = "2.1.1.RELEASE"
        springCloudVersionCode = "Greenwich.SR1"
        zuulVersion="1.3.1"

        mybatisSpringBootVersion = "2.0.1"
        mysqlConnectorJavaVersion = "8.0.15"

        jacksonVersion = "2.9.8"
        jsogVersion = "1.1.1"
        jjwtVersion = "0.9.1"
        jbcryptVersion = "0.4.1"
        jodaTimeVersion = "2.10.1"

        lombokVersion = "1.18.6"
        guavaVersion = "27.1-jre"
        commonsLang3Version = "3.8.1"
        commonsCollections4Version = "4.3"
    }
}

plugins {
    id 'org.springframework.boot' version '2.1.4.RELEASE'
    id 'com.palantir.docker' version '0.22.0'
    id 'com.github.ben-manes.versions' version '0.21.0'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'

configurations {
    all*.exclude(group: "org.springframework.boot", module: "spring-boot-starter-tomcat")
    all*.exclude(group: "commons-logging", module: "commons-logging")
}

repositories {
    maven { url 'http://localhost:8081/nexus/content/groups/public' }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-aop:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-jetty:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-logging:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    implementation "de.codecentric:spring-boot-admin-starter-client:$springBootAdminVersion"
    implementation "de.codecentric:spring-boot-admin-starter-server:$springBootAdminVersion"
    runtimeOnly "org.springframework.boot:spring-boot-devtools:$springBootVersion"
    testImplementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"

    implementation "org.springframework.cloud:spring-cloud-config:$springCloudVersion"
    implementation "org.springframework.cloud:spring-cloud-starter-bus-amqp:$springCloudVersion"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:$springCloudVersion"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-zuul:$springCloudVersion"
}

dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:$springBootAdminVersion"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersionCode"
    }
}

group = 'sujiakeji'
version = '1.0.0-SNAPSHOT'

bootJar {
    baseName = "${rootProject.name}"
    version = "${project.version}"
}

task copyJar(type: Copy) {
    dependsOn bootJar
    from "build/libs/${rootProject.name}-${project.version}.jar"
    into 'build/libs'
    rename { String fileName -> fileName.replace("-${project.version}", "") }
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

docker {
    name "${project.group}/${project.name}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.3'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
        }
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
        inheritOutputDirs = false
        outputDir = file('build/classes/main/')
    }
}
